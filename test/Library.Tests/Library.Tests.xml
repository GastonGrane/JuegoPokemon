<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library.Tests</name>
    </assembly>
    <members>
        <member name="T:Library.Tests.EffectTests">
            <summary>
            Tests que prueban el correcto uncionamiento de los efectos del codigo.
            </summary>
        </member>
        <member name="M:Library.Tests.EffectTests.PoisonEffectShouldExpireWhenHealing">
            <summary>
            Verifica que el efecto de veneno disminuya la salud en un 5% cada turno.
            </summary>
        </member>
        <member name="M:Library.Tests.EffectTests.BurnEffectShouldExpireWhenHealing">
            <summary>
            Verifica que el efecto de quemadura disminuya la salud en un 10% cada turno.
            </summary>
        </member>
        <member name="M:Library.Tests.EffectTests.SleepEffectShouldExpireAfterThreeTurns">
            <summary>
            Verifica que el efecto de sueño impida atacar durante 3 turnos y expire después de esos turnos.
            </summary>
        </member>
        <member name="M:Library.Tests.EffectTests.ParalysisEffectShouldAllowAtLeastOneAttackAndOneBlock">
            <summary>
            Verifica que el efecto de parálisis permita atacar y no atacar al menos una vez cada uno,
            y que el efecto expire al removerlo explícitamente.
            </summary>
        </member>
        <member name="T:Library.Tests.ItemTest">
            <summary>
            Test de los Item.
            </summary>
        </member>
        <member name="M:Library.Tests.ItemTest.CanRevive">
            <summary>
            Testea si el metodo Revive, lo revive con el 50 de HP.
            </summary>
        </member>
        <member name="M:Library.Tests.ItemTest.PasarUnParametroNullFalla">
            <summary>
            Testea que falle el hecho de que pasemos como parametro algo null.
            </summary>
        </member>
        <member name="M:Library.Tests.ItemTest.UseRemovesActiveEffectSuccessfully">
            <summary>
            Verifica que <see cref="M:Library.Items.TotalCure.Use(Library.Pokemon)"/> elimine correctamente un efecto activo
            de estado en el Pokémon cuando existe un efecto activo.
            </summary>
        </member>
        <member name="M:Library.Tests.ItemTest.UseThrowsInvalidOperationExceptionWhenNoActiveEffect">
            <summary>
            Verifica que <see cref="M:Library.Items.TotalCure.Use(Library.Pokemon)"/> lance una excepción
            <see cref="T:System.InvalidOperationException"/> si se intenta utilizar cuando el Pokémon
            no tiene efectos activos de estado.
            </summary>
        </member>
        <member name="T:Library.Tests.NormalAttackTests">
            <summary>
            Test de los metodos de NormalAttack.
            </summary>
        </member>
        <member name="M:Library.Tests.NormalAttackTests.CanNormalAttack">
            <summary>
            Testea el constructor de NormalAttack.
            </summary>
        </member>
        <member name="M:Library.Tests.NormalAttackTests.NormalAttackDevuelveExcepcionSiNombreEsEsNull">
            <summary>
            Testea que ocurra una excepcion si el parametro nombre es null.
            </summary>
        </member>
        <member name="M:Library.Tests.NormalAttackTests.NormalAttackDevuelveExcepcionSiElDamageEsNegativo">
            <summary>
            Testea que ocurra una excepcion si el damage es negativo.
            </summary>
        </member>
        <member name="M:Library.Tests.NormalAttackTests.NormalAttackCanAttack">
            <summary>
            Testea si NormalAttack realmente hace el daño que tendria que hacer.
            </summary>
        </member>
        <member name="T:Library.Tests.PlayerTest">
            <summary>
            Test de Player.
            </summary>
        </member>
        <member name="M:Library.Tests.PlayerTest.PlayerListaDePokemonsNullFalla">
            <summary>
            Testea Player con lista de pokemones null.
            </summary>
        </member>
        <member name="M:Library.Tests.PlayerTest.PlayerSinNombreONullFalla">
            <summary>
            Testea que de una excepcion si creamos un player sin nombre o nombre null.
            </summary>
        </member>
        <member name="M:Library.Tests.PlayerTest.PlayerSinPokemonsFalla">
            <summary>
            Testea que de una excepcion si creamos un player sin pokemons.
            </summary>
        </member>
        <member name="M:Library.Tests.PlayerTest.PlayerAtacaANingunJugadorFalla">
            <summary>
            Testea que ocurra una excepcion si player ataca a null.
            </summary>
        </member>
        <member name="M:Library.Tests.PlayerTest.PlayerSeQuedaSinPokemonVivosTerminaElJuego">
            <summary>
            Testea que ocurra correctamente la implementacion de **AllAreDead**.
            </summary>
        </member>
        <member name="T:Library.Tests.PokemonTests">
            <summary>
            Test de Pokemon y sus metodos.
            </summary>
        </member>
        <member name="M:Library.Tests.PokemonTests.PokemonConMuchosAtaquesFalla">
            <summary>
            Testea que ocurra una excepcion si Pokemon se crea con demasiados ataques.
            </summary>
        </member>
        <member name="M:Library.Tests.PokemonTests.PokemonCon3AtaquesSePuede">
            <summary>
            Testea que no ocurra una excepcion si Pokemon se crea con ataques menores a 4.
            </summary>
        </member>
        <member name="M:Library.Tests.PokemonTests.PokemonSinAtaquesFalla">
            <summary>
            Testea que ocurra una excepcion si Pokemon se crea sin ataques.
            </summary>
        </member>
        <member name="M:Library.Tests.PokemonTests.PokemonAtacaConUnAtaqueInexistenteFalla">
            <summary>
            Testea que ocurra una excepcion si Pokemon ataca con un Ataque inexistente.
            </summary>
        </member>
        <member name="M:Library.Tests.PokemonTests.PokemonSeCuraNegativoFalla">
            <summary>
            Testea que ocurra un error si Pokemon se Cura con numeros negativos.
            </summary>
        </member>
        <member name="M:Library.Tests.PokemonTests.PokemonNoSeCuraDeMas">
            <summary>
            Testea que el pokemon no se cura de mas de su vida maxima, una vez inicializada con el pokemon.
            </summary>
        </member>
        <member name="T:Library.Tests.PokemonTypeTests">
            <summary>
            Tests de la clase <see cref="T:Library.PokemonType"/>.
            </summary>
        </member>
        <member name="M:Library.Tests.PokemonTypeTests.AllCombinationsOfElementsAreValid">
            <summary>
            Testea que todos los valores de <see cref="T:Library.PokemonType"/> tengan un
            valor correcto de ventaja sobre todos los valores
            de <see cref="T:Library.PokemonType"/>.
            </summary>
        </member>
        <member name="T:Library.Tests.SpecialAttackTest">
            <summary>
            Tests para la clase SpecialAttack.
            </summary>
        </member>
        <member name="M:Library.Tests.SpecialAttackTest.SpecialAttackAppliesEffectAfterSuccessfulHit">
            <summary>
            Verifica que el ataque especial golpee al objetivo y aplique el efecto, repitiendo hasta que tenga éxito.
            </summary>
        </member>
        <member name="M:Library.Tests.SpecialAttackTest.SpecialAttackDoesNotOverrideEffectAfterSuccessfulHit">
            <summary>
            Verifica que un ataque especial no reemplace el efecto activo si el Pokémon objetivo ya tiene uno.
            </summary>
        </member>
        <member name="T:Library.Tests.UserStoryTests">
            <summary>
            Tests de las historias de usuario.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory1">
            <summary>
            Test de la primera historia de usuario: se pueden elegir 6 Pokémon.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory2">
            <summary>
            Test de la segunda historia de usuario: se pueden ver los ataques disponibles.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory3">
            <summary>
            Test de la tercera historia de usuario: se puede ver la HP de mis Pokemon y los de mi oponente.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory4">
            <summary>
            Test de la cuarta historia de usuario: atacar y hacer daño basado en tipos.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory5">
            <summary>
            Test de la quinta historia de usuario: quiero saber que es mi turno.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory6">
            <summary>
            Test de la sexta historia de usuario: se gana cuando todos los pokemon de mi oponente mueren.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory7">
            <summary>
            Test de la séptima historia de usuario: se puede cambiar de Pokémon.
            </summary>
        </member>
        <member name="M:Library.Tests.UserStoryTests.UserStory8">
            <summary>
            Test de la octava historia de usuario: se pueden usar items.
            </summary>
        </member>
    </members>
</doc>

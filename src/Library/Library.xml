<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Pokemon">
            <summary>
            Crea instancias de los distintos pokemons. 
            </summary>
        </member>
        <member name="P:Library.Pokemon.Name">
            <summary>
            El nombre del Pokemon. Esto es visible al usuario y sirve para diferencia los distintos Pokemons en la lista de cada jugador
            </summary>
        </member>
        <member name="P:Library.Pokemon.Type">
            <summary>
            Se determina de que tipo será este pokemon. Lo cual posteriormente será evaluado al momento de ser atacado.
            </summary>
        </member>
        <member name="F:Library.Pokemon._health">
            <summary>
            Se almacena el valor actual de salud del pokemon en un campo privado.
            </summary>
        </member>
        <member name="P:Library.Pokemon.MaxHealth">
            <summary>
            Propiedad de solo lectura que representa la salud máxima del pokemon.
            </summary>
        </member>
        <member name="P:Library.Pokemon.Health">
            <summary>
            Propiedad que obtiene y establece la salud actual del pokemon.
            La salud se ajusta automáticamente para que esté dentro del rango de 0 a <see cref="P:Library.Pokemon.MaxHealth"/>:
            - Si el valor excede <see cref="P:Library.Pokemon.MaxHealth"/>, se establece en <see cref="P:Library.Pokemon.MaxHealth"/>.
            - Si el valor es menor que 0, se establece en 0.
            - De lo contrario, se asigna el valor directamente.
            </summary>
        </member>
        <member name="P:Library.Pokemon.Attacks">
            <summary>
            Se crea la lista donde se estableceran los distintos ataques con lo que contará el pokemon.
            </summary>
        </member>
        <member name="M:Library.Pokemon.GetAttack(System.Int32)">
            <summary>
            El método recibe un int correspondiente al indice del ataque que desea utilizar dentro de la <see cref="P:Library.Pokemon.Attacks"/>.
            </summary>
            <param name="attackIdx"></param> Corresponde al valor del indice del ataque al cual se quiere acceder.
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            Lanzada si el Pokémon no tiene ataques disponibles.
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            Lanzada si el índice <paramref name="attackIdx"/> está fuera del rango permitido (0 a <see cref="!:Attacks.Count"/> - 1).
        </member>
        <member name="M:Library.Pokemon.GetAttack(System.String)">
            <summary>
            El método recibe un string correspondiente al nombre del ataque que se encuentra dentro de la lista <see cref="P:Library.Pokemon.Attacks"/>.
            </summary>
            <param name="attackName"></param> Nombre del ataque al cual se quiere acceder.
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">
            Lanzada si el Pokémon no tiene ataques disponibles.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lanzada si el nombre <paramref name="attackName"/> no se encuentra en la lista de ataques.
            </exception>
        </member>
        <member name="M:Library.Pokemon.Attack(Library.Pokemon,Library.Attack)">
            <summary>
            Realiza un ataque sobre el Pokémon objetivo utilizando el ataque especificado.
            </summary>
            <param name="target">Pokémon objetivo al que se le aplicará el ataque.</param>
            <param name="attack">El ataque que se usará para realizar el daño.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lanzada si el ataque especificado no se encuentra dentro de la lista <see cref="P:Library.Pokemon.Attacks"/> del Pokémon que ataca.
            </exception>
        </member>
        <member name="M:Library.Pokemon.Attack(Library.Pokemon,System.Int32)">
            <summary>
            Realiza un ataque sobre el Pokémon objetivo utilizando el índice especificado para acceder al ataque.
            </summary>
            <param name="target">El Pokémon objetivo al que se le aplicará el ataque.</param>
            <param name="attackIdx">El índice del ataque en la lista de ataques del Pokémon.</param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada si el Pokémon objetivo <paramref name="target"/> es <c>null</c>.
            </exception>
        </member>
        <member name="M:Library.Pokemon.Attack(Library.Pokemon,System.String)">
            <summary>
            Realiza un ataque sobre el Pokémon objetivo utilizando el nombre del ataque especificado.
            </summary>
            <param name="target">El Pokémon objetivo al que se le aplicará el ataque.</param>
            <param name="attackName">El nombre del ataque que se usará para realizar el daño.</param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada si el Pokémon objetivo <paramref name="target"/> es <c>null</c>.
            </exception>
        </member>
        <member name="M:Library.Pokemon.Curar(System.Int32)">
            <summary>
            Restaura la salud del Pokémon a un valor especificado.
            </summary>
            <param name="health">La cantidad de salud a la que se restaurará el Pokémon.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lanzada si el valor de salud <paramref name="health"/> es menor que 0.
            </exception>
        </member>
    </members>
</doc>

%% Quedó precioso, ya sé
classDiagram
    accTitle: Diagrama de Clases Proyecto Final

    class Pokemon {
      -int health
      -List~Attack~ attacks
      -IProbability precisionGen

      +IEffect? ActiveEffect
      +string Name
      +Type PokemonType
      +int MaxHealth
      +int Health
      +bool CanAttack
      +ReadOnlyCollection~NormalAttack~ Attacks
      +ReadOnlyCollection~NormalAttack~ AvailableAttacks

      +Pokemon(string name, PokemonType type, int maxHealth, List~Attack~ attacks)
      +Pokemon(string name, PokemonType type, int maxHealth, List~Attack~ attacks, IProbability precisionGen)
      +Pokemon(Pokemon pokemon)
      +Attack(Pokemon target, int attackIdx) void
      +Attack(Pokemon target, string attackName) void
      +Heal(int health) void
      +Damage(int health) void
      +ApplyEffect(IEffect effect) void
      +UpdateEffect() void
      +RemoveEffect() void
      -Attack(Pokemon target, Attack attack) bool
      -GetAttack(string attackName) Attack
      -GetAttack(int attackIdx) Attack
    }

    Pokemon "1" *-- "0..*" PokemonType
    Pokemon "1" *-- "1" IEffect
    Pokemon "1..4" o-- "1" Attack
    Pokemon "1" *-- "0..*" IProbability

    <<enumeration>> PokemonType
    class PokemonType {
      Normal
      Fire
      Water
      Electric
      Grass
      Ice
      Fighting
      Poison
      Ground
      Flying
      Psychic
      Bug
      Rock
      Ghost
      Dragon

      +Advantage(Element other) double
    }

    <<interface>> IEffect
    class IEffect {
      +bool IsExpired

      +UpdateEffect(Pokemon target) void
      +RemoveEffect(Pokemon target) void
    }

    class Burn {
      +bool IsExpired

      +Burn()
      +UpdateEffect(Pokemon target) void
      +RemoveEffect(Pokemon target) void
    }
    Burn ..|> IEffect

    class Poison {
      +bool IsExpired

      +Poison()
      +UpdateEffect(Pokemon target) void
      +RemoveEffect(Pokemon target) void
    }
    Poison ..|> IEffect

    class Sleep {
      -int turnsRemaining
      +bool IsExpired

      +Sleep()
      +UpdateEffect(Pokemon target) void
      +RemoveEffect(Pokemon target) void
    }
    Sleep ..|> IEffect

    class Paralysis {
      +bool IsExpired

      +Paralysis()
      +UpdateEffect(Pokemon target) void
      +RemoveEffect(Pokemon target) void
    }
    Paralysis ..|> IEffect

    <<abstract>> Attack
    class Attack {

      #Attack(string name, int damage, PokemonType type, int precision)
      #Attack(Attack attack)
      +Use(Pokemon target)* void
    }
    Attack "1" *-- "0..*" PokemonType

    class NormalAttack {
      +string Name
      +int Damage
      +PokemonType Type
      +int Precision
      +bool Available
      +int AmountUnusedTurn
      #IProbability CriticalGen

      #NormalAttack(string name, int damage, PokemonType type, int precision)
      %% es rarísimo lo mal que queda.
      #NormalAttack(string name, int damage, PokemonType type, int precision, IProbability criticalGen)
      #NormalAttack(NormalAttack normalAttack)
      +Use(Pokemon target)* void
      +UpdateTurn()* void
    }
    NormalAttack "1" *-- "0..*" PokemonType
    NormalAttack "1" *-- "0..*" IProbability

    class SpecialAttack {
      -IEffect effect

      +string Name
      +int Damage
      +PokemonType Type
      +int Precision
      +bool Available
      +int AmountUnusedTurn
      #IProbability CriticalGen

      #SpecialAttack(string name, int damage, PokemonType type, int precision, IEffect effect)
      #SpecialAttack(string name, int damage, PokemonType type, int precision, IEffect effect, IProbability criticalGen)
      #SpecialAttack(NormalAttack normalAttack)
      +Use(Pokemon target)* void
      +UpdateTurn()* void
    }
    SpecialAttack "1" *-- "0..*" PokemonType
    SpecialAttack "1" *-- "1" IEffect
    SpecialAttack "1" *-- "0..*" IProbability
    SpecialAttack ..|> Attack


    class Player {
      +string Name
      +List~Pokemon~ Pokemon
      +List~Item~ Pokemon
      +Pokemon ActivePokemon

      +Player(string name, List~Pokemon~ pokemon)
      +Attack(Player other, string attackName) void
      +ChangePokemon(string newPokemon) bool
      +ChangePokemon(int pokeIdx) bool
      +Attack(Player other, string attackName) bool
      +AllAreDead() bool
      +ApplyItem(Pokemon target, string name) void
      +UpdateTurn() void
    }
    Player "6" o-- "0..1" Pokemon
    Player "0..*" o-- "0..1" Item

    <<abstract>> Item
    class Item {
      +string Name

      +Use(Pokemon pokemon)* void
    }

    class TotalCure {
      +string Name

      +TotalCure()
      +Use(Pokemon pokemon)* void
    }
    TotalCure ..|> Item

    class SuperPotion {
      +string Name

      +SuperPotion()
      +Use(Pokemon pokemon)* void
    }
    SuperPotion ..|> Item

    class Revive {
      +string Name

      +Revive()
      +Use(Pokemon pokemon)* void
    }
    Revive ..|> Item

    class PokemonRegistry {
      -PokemonRegistry instance$
      -Dictionary~string, Pokemon~ pokemon

      +PokemonRegistry Instance$

      +ResetSingleton() void$
      +InitSingleton() void$
      +InitSingleton(IProbability precisionGen) void$
      +GetPokemon(string name) Pokemon$
      +GetAllPokemon() List~Pokemon~$
      +GetPokemonNamesAndTypes() List~string, PokemonType~$
    }
    Pokemon "0..*" --o "1" PokemonRegistry

    class AttackRegistry {
      -AttackRegistry instance$
      -Dictionary~string, NormalAttack~ normalAttacks

      +AttackRegistry Instance$

      +ResetSingleton() void$
      +InitSingleton() void$
      +InitSingleton(IProbability precisionGen) void$
      +GetNormalAttack(string name) Pokemon$
      +GetPokemonNamesAndTypes() List~string, PokemonType~$
      +GetAttackNamesAndTypes() List~string, PokemonType~$
    }
    Pokemon "0..*" --o "1" NormalAttackRegistry

    class Game {
      -IExternalConnection externalConnection
      -Player playerOne
      -Player playerTwo

      +Game(Player p1, Player p2, IExternalConnection externalConnection)
      +ShowWelcome() void
      +Play() void
      +PlayGameTurn() void
      -AttackPlayer(Player active, Player other) bool
      -UseItem(Player active) bool
      -PlayTurn(Player active, Player other) void
      -PlayTurnP1() void
      -PlayTurnP2() void
      -ChngePokemon(Player p) bool
      -CheckDead(Player p) bool
    }

    Game "1" *-- "1" IExternalConnection
    Game "2" *-- "1" Player

    <<interface>> IExternalConnection
    class IExternalConnection {
      +PrintString(string str) void
      +PrintWelcome(Player p1, Player p2) void
      +PrintPlayerWon(Player p1, Player p2) void
      +PrintTurnHeading(Player player) void
      +ShowMenuAndReceiveInput(string selectionText, ReadOnlyCollection<string> options) int
      +ShowAttacksAndRecieveInput(Pokemon pokemon) string?
      +ShowItemsAndRecieveInput(Player player) Item?
      +ShowPokemonMenu(Player player) int
      +ReportAttackResult(int oldHP, Player attacker, Player defender) void
    }

    class ConsoleConnection {
      +PrintString(string str) void
      +PrintWelcome(Player p1, Player p2) void
      +PrintPlayerWon(Player p1, Player p2) void
      +PrintTurnHeading(Player player) void
      +ShowMenuAndReceiveInput(string selectionText, ReadOnlyCollection<string> options) int
      +ShowAttacksAndRecieveInput(Pokemon pokemon) string?
      +ShowItemsAndRecieveInput(Player player) Item?
      +ShowPokemonMenu(Player player) int
      +ReportAttackResult(int oldHP, Player attacker, Player defender) void
    }
    ConsoleConnection ..|> IExternalConnection

    <<interface>> IProbability
    class IProbability {
      +Chance(int porcentaje) bool
      +Number(int limInferior, int limSuperior) int
    }
